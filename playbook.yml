- name: Basic server setup
  hosts: servers
  become: yes  # Run tasks with sudo privileges
  tasks:
    # System updates
    # Update the apt package cache to get the latest package information
    - name: Update apt
      apt:
        update_cache: true  # Equivalent to 'apt-get update'

    # Upgrade all installed packages to their latest versions
    - name: Upgrade all packages
      apt:
        upgrade: dist  # Equivalent to 'apt-get dist-upgrade'

    # Time configuration
    # Set the system timezone to Europe/Kyiv
    - name: Set timezone to whatever set in the .env file
      timezone:
        name: "{{ TIMEZONE }}"  # Sets timezone using timedatectl

    # Install chrony package for NTP time synchronization
    - name: Install chrony for time synchronization
      apt:
        name: chrony
        state: present  # Ensures the package is installed

    # Start and enable chrony service to run on boot
    - name: Enable and start chrony service
      service:
        name: chrony
        state: started  # Starts the service
        enabled: yes    # Enables service to start on boot

    # Root user SSH setup
    # Create SSH directory for the root user
    - name: Create SSH directory for the root user
      file:
        path: "/{{ ANSIBLE_USER }}/.ssh"
        state: directory
        mode: '0700'

    # Add SSH key to root user's authorized_keys
    - name: Add SSH key to root user's authorized_keys
      authorized_key:
        user: "{{ ANSIBLE_USER }}"
        key: "{{ lookup('file', SSH_KEY_PATH) }}"
        state: present

    # User and SSH setup
    # Generate password hash
    - name: Generate password hash
      set_fact:
        hashed_password: "{{ NEW_USER_PASSWORD | password_hash('sha512') }}"

    # Create or update user with sudo privileges
    - name: Add user
      user:
        name: "{{ NEW_USER_NAME }}"
        state: present
        groups: sudo               # Adds user to sudo group
        append: true              # Appends to existing groups instead of replacing
        password: "{{ hashed_password }}"

    # Configure sudo privileges for new user
    - name: Configure sudo privileges for new user
      copy:
        dest: /etc/sudoers.d/{{ NEW_USER_NAME }}
        content: "{{ NEW_USER_NAME }} ALL=(ALL) ALL"
        mode: '0440'
        validate: /usr/sbin/visudo -cf %s

    # Create .ssh directory with secure permissions
    - name: Create .ssh directory
      file:
        path: "/home/{{ NEW_USER_NAME }}/.ssh"
        state: directory
        mode: '0700'  # Sets permissions to 700 (rwx------)

    # Add the SSH public key to authorized_keys file
    - name: Add SSH key to authorized_keys
      authorized_key:
        user: "{{ NEW_USER_NAME }}"
        key: "{{ lookup('file', SSH_KEY_PATH) }}"  # Reads the public key from file
        state: present

    # Configure SSH daemon for security
    - name: Configure secure SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' } 
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }  # Disable password auth
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }  # Disable challenge-response auth
        - { regexp: '^#?UsePAM', line: 'UsePAM no' }  # Disable PAM authentication
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }  # Ensure public key authentication is enabled
      notify: restart ssh  # Triggers SSH service restart when config changes

    # Create custom SSH config
    - name: Create custom SSH config
      copy:
        src: ./config/ssh/99-custom.conf
        dest: /etc/ssh/sshd_config.d/99-custom.conf
        mode: '0644'
      notify: restart ssh
      
    # Basic package installation
    # Install essential system utilities
    - name: Install packages
      apt:
        name:
          - vim    # Text editor
          - curl   # HTTP client
          - htop   # Process viewer
          - git    # Version control
          - mtr    # Network diagnostic tool
        state: present

    # Security setup
    # Install security-related packages
    - name: Install security packages
      apt:
        name:
          - fail2ban  # Intrusion prevention
          - ufw       # Firewall
        state: present

    # Configure fail2ban
    - name: Create fail2ban jail.local file
      copy:
        dest: /etc/fail2ban/jail.local
        src: ./config/fail2ban/jail.local

    - name: Enable fail2ban service
      service:
        name: fail2ban
        state: started
        enabled: yes

    # Configure UFW to allow SSH connections
    - name: Allow OpenSSH through UFW
      ufw:
        rule: allow
        name: OpenSSH
        state: enabled

    # Enable UFW firewall with default deny policy
    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny  # Deny all incoming connections by default

    # Automatic updates configuration
    # Install unattended-upgrades package
    - name: Install unattended-upgrades
      apt:
        name: unattended-upgrades
        state: present

    # Enable automatic updates through debconf
    - name: Enable unattended-upgrades
      debconf:
        name: unattended-upgrades
        question: unattended-upgrades/enable_auto_updates
        value: "true"
        vtype: boolean

    # Configure unattended-upgrades behavior
    - name: Configure unattended-upgrades
      blockinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        create: yes
        block: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";  # Fix interrupted upgrades
          Unattended-Upgrade::MinimalSteps "true";            # Use minimal steps
          Unattended-Upgrade::InstallOnShutdown "false";      # Don't install on shutdown
          Unattended-Upgrade::Remove-Unused-Dependencies "true";  # Clean up
          Unattended-Upgrade::Automatic-Reboot "false";       # Don't reboot automatically

    # Configure automatic update schedule
    - name: Configure automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        src: ./config/apt/20auto-upgrades

    # Start and enable unattended-upgrades service
    - name: Start and enable unattended-upgrades service
      service:
        name: unattended-upgrades
        state: started
        enabled: yes

  handlers:
    # Handler to restart SSH service when configuration changes
    - name: restart ssh
      service:
        name: ssh
        state: restarted

  vars:
    SSH_KEY_PATH: "{{ lookup('env', 'SSH_KEY_PATH') }}"
    NEW_USER_PASSWORD: "{{ lookup('env', 'NEW_USER_PASSWORD') }}"
    NEW_USER_NAME: "{{ lookup('env', 'NEW_USER_NAME') }}"
    ANSIBLE_USER: "{{ lookup('env', 'ANSIBLE_USER') }}"
    TIMEZONE: "{{ lookup('env', 'TIMEZONE') }}"
